import os
import re
import random
import logging
from typing import Set

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# --- Logging ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("d6d20-bot")

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π –≤ Railway Variables

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–≥–µ—Ç–∞:
# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TARGET_USER_IDS –∑–∞–¥–∞–Ω–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ò–î—à–Ω–∏–∫–∏ Telegram),
# –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ '–¥–∞' –¢–û–õ–¨–ö–û —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
# –ü—Ä–∏–º–µ—Ä: TARGET_USER_IDS=123456789,987654321
def parse_target_ids(env_val: str | None) -> Set[int]:
    if not env_val:
        return set()
    out: Set[int] = set()
    for part in env_val.split(","):
        part = part.strip()
        if not part:
            continue
        try:
            out.add(int(part))
        except ValueError:
            log.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user id –≤ TARGET_USER_IDS: %r", part)
    return out

TARGET_USER_IDS = parse_target_ids(os.getenv("TARGET_USER_IDS"))

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø D6/D20 –±–æ—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –Ω–∞ '–¥–∞'.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /d6 –∏ /d20.\n"
        "–ü–∏—à–µ—à—å '–¥6' –∏–ª–∏ '–¥20' ‚Äî —Ç–æ–∂–µ –±—Ä–æ—à—É (–µ—Å–ª–∏ privacy –≤—ã–∫–ª—é—á–µ–Ω).\n"
        "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–æ–≤–Ω–æ '–¥–∞' (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Å —Ç–æ—á–∫–æ–π/!/?) ‚Äî –æ—Ç–≤–µ—á—É –≥—Ä—É–±–æ—Å—Ç—å—é.\n"
        "–ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ '–¥–∞' —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TARGET_USER_IDS."
    )

async def roll_d6(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"üé≤ (D6) –í—ã–ø–∞–ª–æ: {random.randint(1, 6)}")

async def roll_d20(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"üé≤ (D20) –í—ã–ø–∞–ª–æ: {random.randint(1, 20)}")

# –ª–æ–≤–∏–º '–¥6'/'d6'/'–¥20'/'d20' (–∏ –¥–∞–∂–µ —Å –≤–µ–¥—É—â–∏–º '/'), –µ—Å–ª–∏ privacy –æ—Ç–∫–ª—é—á—ë–Ω
DICE_REGEX = re.compile(r"^\s*[\/]?(?:–¥6|d6|–¥20|d20)\s*$", re.IGNORECASE)

# '–¥–∞' (—Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞), –ª—é–±—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥, –¥–æ–ø—É—Å–∫–∞–µ–º . ! ? ‚Ä¶ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
YES_REGEX = re.compile(r"^\s*–¥–∞[.!?‚Ä¶]*\s*$", re.IGNORECASE)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if not msg or not msg.text:
        return

    txt = msg.text.strip()

    # 1) DICE text triggers
    if DICE_REGEX.match(txt.lower()):
        if "20" in txt:
            await roll_d20(update, context)
        else:
            await roll_d6(update, context)
        return

    # 2) YES trigger ('–¥–∞' only)
    if YES_REGEX.match(txt):
        user = update.effective_user
        if TARGET_USER_IDS and user and user.id not in TARGET_USER_IDS:
            return  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
        # –û—Ç–≤–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä—É –≥—Ä—É–±–æ—Å—Ç—å—é
        await msg.reply_text("–ø–∏–∑–¥–∞")
        return

async def post_init(app: Application) -> None:
    await app.bot.set_my_commands([
        ("d6", "–ë—Ä–æ—Å–∏—Ç—å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫"),
        ("d20", "–ë—Ä–æ—Å–∏—Ç—å –¥–≤–∞–¥—Ü–∞—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫"),
    ])
    me = await app.bot.get_me()
    log.info("Bot started as @%s (id=%s). Targets: %s", me.username, me.id,
             ",".join(str(i) for i in sorted(TARGET_USER_IDS)) if TARGET_USER_IDS else "ALL")

def main() -> None:
    if not TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = (
        Application.builder()
        .token(TOKEN)
        .post_init(post_init)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("d6", roll_d6))
    app.add_handler(CommandHandler("d20", roll_d20))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.run_polling(allowed_updates=["message"])

if __name__ == "__main__":
    main()